import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult
import hudson.util.DescribableList
import hudson.slaves.EnvironmentVariablesNodeProperty
import jenkins.model.Jenkins

def now = new Date()
def TIME_STAMP = now.format("yyMMdd.HHmmssSSS", TimeZone.getTimeZone('UTC'))
def test_stage = '1'
def WK = ""

properties(
    [
        parameters([
          string(name: 'node', defaultValue: 'automation', description: 'Jenkins Node Name', ),
          string(name: 'Regressiontestcase', defaultValue: 'Regressiontestcase.csv', description:'Regressiontestcase', ),
          choice(choices: ['NO', 'YES'],name: 'PARALLELRUNNING'),
        ]),
        buildDiscarder(logRotator(daysToKeepStr: '100', numToKeepStr: '100'))
    ]
)

node(node) {


    //Clean up Build machine Workspace
    stage('init') {
     //Clean up WORKSPACE
     step([$class: 'WsCleanup'])
    }

    //Get Source Code
    stage('Checkout') {

       println "Current branch ${env.BRANCH_NAME}"
       println "Change branch ${env.CHANGE_BRANCH}"
       println "Target branch ${env.CHANGE_TARGET}"
       branch = env.BRANCH_NAME

       if(env.CHANGE_BRANCH) {
         branch = env.CHANGE_BRANCH
       }

       checkout([
                    $class: 'GitSCM',
                    branches: [[name: branch]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: []
                    .plus(env.CHANGE_TARGET == null ? [] : [
                        [$class: 'PreBuildMerge', options: [fastForwardMode: 'NO_FF', mergeRemote: 'origin', mergeTarget: env.CHANGE_TARGET]],
                    ]),
                    submoduleCfg: [],
                    userRemoteConfigs: [[name: 'origin', url: 'https://github.com/asahigroup/converse-selenium.git',credentialsId: '8de7f348-d672-40a5-b44d-36b84400fa64']]
       ])

    }

  try {

    stage('prepare test') {

       def branch = env.BRANCH_NAME
       sh "pwd"

       //Mount volume
       def workspace = env.WORKSPACE
       WK = "${branch}" + "${TIME_STAMP}"
       println "Current Work Folder"
       println "${WK}"

       sh "sudo mkdir ${workspace}/wk"
       sh "sudo chmod 777 ${workspace}/wk"
       sh "sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,ac,actimeo=0 fs-0ca21c187c659e2e4.efs.ap-northeast-1.amazonaws.com:/ ${workspace}/wk"

       sh "sudo mkdir ${workspace}/wk/${WK}"
       sh "sudo chmod 777 ${workspace}/wk/${WK}"


      sh "cp -r ${workspace}/test ${workspace}/wk/${WK}/"

      sh "ls -la ${workspace}/wk"

       //Test Result Folder
       sh "sudo mkdir ${workspace}/testResult"
       sh "sudo chmod 777 ${workspace}/testResult"

       //Screenshot
       sh "sudo mkdir ${workspace}/testImage"
       sh "sudo chmod 777 ${workspace}/testImage"

       sh "ls -la ${workspace}/wk/${WK}/test"

    }

    stage('run tests') {
/*
        ChatUser1
Password@1
MyChats
CaregiverChat71
*/
/*
        def user     =  "ChatUser1"             //"anjan6"
        def password =  "Password@1"            //"Anjani@123"
        def param1   =  "MyChats"                     //"Patient\\ Issue"
        def param2   =  "CaregiverChat71"                      //"Chat118\\ Caregiver"
        def param3   = "5"
        def testresult = "cargiverchat.xml"
*/

        def user     =  "anjan6"
        def password =  "Anjani@123"
        def param1   =  "Patient\\ Issue"
        def param2   =  "Chat118\\ Caregiver"
        def param3   = "5"

         if("${env.BRANCH_NAME}" == "main") {

         /* def unzip = Regressiontestcase.replace(".csv", ".csv")

              withCredentials([usernamePassword(credentialsId: 'b29d6e77-6e83-474f-8eea-8029efe9471e', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
              sh 'unzip -P $PASSWORD Data/${Regressiontestcase}'

            print "raviraj"
            }
         */

           if (fileExists("Data/${Regressiontestcase}"))
           {
              print "Raviraj"
              echo 'chatData found'
              def fps =[]
              def index = 0

               if("${params.PARALLELRUNNING}" == "YES") {
                   println "Parallel YES"
                   readFile("Data/${Regressiontestcase}").split('\n').each { line, count -> def fields = line.split(',')
                      script     = fields[1]
                      testresult = fields[2]

                      js = "${branch}" + "${TIME_STAMP}" + index + ".json"
                      def fp = "${workspace}/${js}"
                      fps << fp

                      def script1 = "/test/${WK}/test/${script}"
                      sh "python3 dynamicgrid.py ${script1} ${testresult} > ${fp}"
                      index++
                      sleep 1
                   }
                   sleep 70
                   println fps
                   def allTasks = []
                   for (String fp:fps){
                     allTasks << taskList(fp)[0]
                   }
                   println allTasks
                   waitingTasks(allTasks)

               } else {  //SEQUENTIAL RUNNING
                  println "Parallel NO"
                     readFile("Data/${Regressiontestcase}").split('\n').each { line, count -> def fields = line.split(',')
                      script     = fields[1]
                      testresult = fields[2]


                      js = "${branch}" + "${TIME_STAMP}" + index + ".json"
                      def fp = "${workspace}/${js}"
                      fps << fp

                      def script1 = "/test/${WK}/test/${script}"
                      sh "python3 automation.py ${script1} ${testresult} > ${fp}"
                      sleep 3
                      println fps
                      def allTasks = []
                      for (String fp1:fps){
                         allTasks << taskList(fp1)[0]
                      }
                      println allTasks
                      waitingTasks(allTasks)
                      index++
                  }

               }

           } else {echo 'csv Not found. Failing.'}

        }

        def json = "${branch}" + "${TIME_STAMP}" + ".json"
        def filePath = "${workspace}/${json}"

        if("${env.BRANCH_NAME}" == "caregiver") {
           def script = "/test/${WK}/test/test_caregiver_chat.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks = taskList(filePath)
           waitingTasks(tasks)
        }
        if("${env.BRANCH_NAME}" == "login") {
           def script = "/test/${WK}/test/test_login.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks = taskList(filePath)
           waitingTasks(tasks)
        }
        if("${env.BRANCH_NAME}" == "createPatient") {
           user     =  "ShilpaReskinNS"
           password =  "Shilpa@123456"
           param1   =  "None"
           param2   =  "None"
           param3   =  "None"
           script = "/test/${WK}/test/test_create_patient.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks = taskList(filePath)
           waitingTasks(tasks)
        }
        if("${env.BRANCH_NAME}" == "createCaregiver") {
         user     =  "ShilpaReskinNS"
           password =  "Shilpa@123456"
           param1   =  "None"
           param2   =  "None"
           param3   =  "None"
           def script = "/test/${WK}/test/test_create_caregiver.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks = taskList(filePath)
           waitingTasks(tasks)
        }
        if("${env.BRANCH_NAME}" == "sandbox") {
/*
           def index = 0
           def fps =[]

           user     =  "ShilpaReskinNS"
           password =  "Shilpa@123456"
           param1   =  "None"
           param2   =  "None"
           param3   =  "None"

           js = "${branch}" + "${TIME_STAMP}" + index + ".json"
           fp = "${workspace}/${js}"
           fps << fp

           def script = "/test/${WK}/test/test_create_caregiver.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${fp}"
           index++

           js = "${branch}" + "${TIME_STAMP}" + index + ".json"
           fp = "${workspace}/${js}"
           fps << fp

           script = "/test/${WK}/test/test_create_patient.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${fp}"
           index++

           sleep 5
           println fps
           def allTasks = []
           for (String fpt:fps){
                allTasks << taskList(fpt)[0]
           }
           println allTasks
           waitingTasks(allTasks)
*/
           user     =  "ShilpaReskinNS"
           password =  "Shilpa@123456"
           param1   =  "None"
           param2   =  "None"
           param3   =  "None"

     //    def script  = "/test/${WK}/test/test_login.py"
           def script = "/test/${WK}/test/test_create_caregiver.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks1 = taskList(filePath)

     //    script  = "/test/${WK}/test/test_caregiver_chat.py"
           script = "/test/${WK}/test/test_create_patient.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks2 = taskList(filePath)

           waitingTasks(tasks1+tasks2)

        }
        if("${env.BRANCH_NAME}" == "master") {

           def script  = "/test/${WK}/test/test_login.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks1 = taskList(filePath)

           script  = "/test/${WK}/test/test_caregiver_chat.py"
           sh "python3 automation.py ${script} ${user} ${password} ${param1} ${param2} ${param3} ${testresult} > ${filePath}"
           sleep 5
           tasks2 = taskList(filePath)

           waitingTasks(tasks1+tasks2)
        }

    }

   stage('generate report'){

    try {
       sh "ls -la ${workspace}/wk/${WK}/test"
       sh "ls -la ${workspace}/wk/${WK}"
       sh "ls -la ${workspace}/wk"

       sh "mv ${workspace}/wk/${WK}/test/*.xml ${workspace}/testResult"
       junit 'testResult/*.xml'

       sh "mv ${workspace}/wk/*.png ${workspace}/testImage"

     } catch(e) {

     }
   }

   stage('clean up') {
        echo "${WK}"
        cleanup(WK)
   }

  } catch(e) {
      echo "${WK}"
      cleanup(WK)
  }

}

def taskList(filePath) {
        def tasks =[]
        if (fileExists("${filePath}")) {

            def f = readFile("${filePath}")
            def lines = f.readLines()

            lines.each { String line ->
              if(line.contains("containerArn")){
                 def s = line.split('/')
                 println s[s.size()-2]
                 tasks << s[s.size()-2]
              }
            }

         println tasks
        }

       return tasks
}

def waitingTasks(tasks) {

        def testStatus = false
        while(testStatus == false) {

           def running = sh(script: 'aws ecs list-tasks --cluster selenium-automation', returnStdout: true)
           println running

           count = 0
           for (String task : tasks){
              if(running.contains(task)) {
                   count++
              }
           }

           println count

           if(count == 0) {
              testStatus = true
           }

            sleep 5
        }
}

def cleanup(WK) {
    try {
       //Mount volume
       def workspace = env.WORKSPACE
       archiveArtifacts 'testImage/*'
       sh "sudo rm -r ${workspace}/testImage"
       sh "sudo rm -r -f ${workspace}/wk/${WK}"
       sh "sudo rm -r -f ${workspace}/wk/__pycache__"
       sh "sudo rm *"
       dir("${workspace}") {
          sh "fuser -muv ${workspace}/wk"
          sh "sudo umount -i ${workspace}/wk"
       }
    } catch (e) {
        sh "sudo umount -i ${workspace}/wk"
    }
 }
