import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult
import hudson.util.DescribableList
import hudson.slaves.EnvironmentVariablesNodeProperty
import jenkins.model.Jenkins

def now = new Date()
def TIME_STAMP = now.format("yyMMdd.HHmmssSSS", TimeZone.getTimeZone('UTC'))
def test_stage = '1'
def WK = ""

properties(
    [
        parameters([
          string(name: 'node', defaultValue: 'automation', description: 'Jenkins Node Name', ),
          string(name: 'Regressiontestcase', defaultValue: 'Regressiontestcase.csv', description:'Regressiontestcase', ),
          string(name: 'TIMEOUT', defaultValue: '1200', description:'TIMEOUT (sec)', ),
          choice(choices: ['YES'],name: 'LOCALDRIVER'),
        ]),
        buildDiscarder(logRotator(daysToKeepStr: '20', numToKeepStr: '20')),
        pipelineTriggers([cron('30 8 * * *')])
    ]
)

node(node) {


    //Clean up Build machine Workspace
    stage('init') {
     //Clean up WORKSPACE
      step([$class: 'WsCleanup'])
    }

    //Get Source Code
    stage('Checkout') {

       println "Current branch ${env.BRANCH_NAME}"
       println "Change branch ${env.CHANGE_BRANCH}"
       println "Target branch ${env.CHANGE_TARGET}"
       branch = env.BRANCH_NAME

       if(env.CHANGE_BRANCH) {
         branch = env.CHANGE_BRANCH
       }

       checkout([
                    $class: 'GitSCM',
                    branches: [[name: branch]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: []
                    .plus(env.CHANGE_TARGET == null ? [] : [
                        [$class: 'PreBuildMerge', options: [fastForwardMode: 'NO_FF', mergeRemote: 'origin', mergeTarget: env.CHANGE_TARGET]],
                    ]),
                    submoduleCfg: [],
                    userRemoteConfigs: [[name: 'origin', url: 'https://github.com/asahigroup/converse-selenium.git',credentialsId: '17998204-00c8-41e3-9d01-5bd5a1a29f98']]

       ])

    }

  try {

    stage('prepare test') {

     if("${params.LOCALDRIVER}" == "YES") {
       sh "sudo rm -f test/conftest.py"
       sh "sudo mv test/conftest.local test/conftest.py"
     }

     if("${params.PARALLELRUNNING}" == "YET") {

       def branch = env.BRANCH_NAME
       sh "pwd"

       //Mount volume
       def workspace = env.WORKSPACE
       WK = "${branch}" //+ "${TIME_STAMP}"
       println "Current Work Folder"
       println "${WK}"

       sh "sudo mkdir ${workspace}/wk"
       sh "sudo chmod 777 ${workspace}/wk"
       sh "sudo mount -t efs fs-0791f33cc165acc63:/ ${workspace}/wk"

       cleanupEFS()

       sh "sudo mkdir ${workspace}/wk/${WK}"
       sh "sudo chmod 777 ${workspace}/wk/${WK}"


      sh "cp -r ${workspace}/test ${workspace}/wk/${WK}/"

      sh "ls -la ${workspace}/wk"

       //Test Result Folder
       sh "sudo mkdir ${workspace}/testResult"
       sh "sudo chmod 777 ${workspace}/testResult"

       //Screenshot
       sh "sudo mkdir ${workspace}/testImage"
       sh "sudo chmod 777 ${workspace}/testImage"

       sh "ls -la ${workspace}/wk/${WK}/test"
     } else {  //SEQUENTIAL RUNNING

           //Test Result Folder
       sh "sudo mkdir ${workspace}/testResult"
       sh "sudo chmod 777 ${workspace}/testResult"

       //Screenshot
       sh "sudo mkdir ${workspace}/testImage"
       sh "sudo chmod 777 ${workspace}/testImage"


        sh "whoami"
        sh "cat docker-compose.yml"
        sh "sudo docker-compose -f docker-compose.yml down"
        sh "sudo docker volume prune -f"
        sh "sudo docker-compose -f docker-compose.yml build"
        sh "sudo docker-compose -f docker-compose.yml up -d"
        sh "sudo docker-compose -f docker-compose.yml ps"
     }
    }

    stage('run tests') {

         if("${env.BRANCH_NAME}" == "main") {

           if (fileExists("Data/${Regressiontestcase}"))
           {
              echo 'chatData found'
              def fps =[]
              def index = 0

               if("${params.PARALLELRUNNING}" == "RYTRYTRY") {
                   println "Parallel YES"
                   readFile("${unzip}").split('\n').each { line, count -> def fields = line.split(',')
                      script     = fields[1]
                      testresult = fields[2]


                      js = "${branch}" + "${TIME_STAMP}" + index + ".json"
                      def fp = "${workspace}/${js}"
                      fps << fp

                      def script1 = "/test/${WK}/test/${script}"
                      sh "python3 automation.py ${script1} ${testresult} > ${fp}"
                      sleep 3
                      index++
                   }
                   println fps
                   def allTasks = []
                   for (String fp:fps){
                     allTasks << taskList(fp)[0]
                   }
                   println allTasks
                   waitingTasks(allTasks)

               } else {  //SEQUENTIAL RUNNING
                  println "Parallel NO"
                  readFile("Data/${Regressiontestcase}").split('\n').each { line, count -> def fields = line.split(',')
                      script     = fields[1]
                      testresult = fields[1] + ".xml"

                      try {
		         sh "sudo docker container exec selenium_automation pytest ${script} --junitxml=${testresult}"
                      	} catch(e) {
	                }

                 }

               }

           } else {echo 'csv Not found. Failing.'}

        }

    }

   stage('generate report'){
      generateReport(WK)
   }

   stage('clean up') {
        echo "${WK}"
        cleanup(WK)
   }

  } catch(e) {
      echo "${WK}"
      generateReport(WK)
      cleanup(WK)
  }

}

def cleanupEFS() {

   println "EFS Mount folder status"

   dir("${workspace}/wk") {

     sh "pwd"
     sh "ls -la"

     //Delete pytest cache
     try {
    //   sh "sudo rm -r -f .pytest_cache"
     } catch(e) {
     }

     //Delete folders
     try {
   //    sh "sudo rm -r -f *"
     } catch(e) {
     }

     //Delete files
     try {
    //   sh "sudo rm -r *"
     } catch(e) {
     }

     sh "pwd"
     sh "ls -la"

   }
}

def generateReport(WK) {

    try {
      if("${params.PARALLELRUNNING}" == "YES") {
       sh "ls -la ${workspace}/wk/${WK}/test"
       sh "ls -la ${workspace}/wk/${WK}"
       sh "ls -la ${workspace}/wk"

       sh "mv ${workspace}/wk/${WK}/test/*.xml ${workspace}/testResult"
       junit 'testResult/*.xml'

       sh "mv ${workspace}/wk/*.png ${workspace}/testImage"
       archiveArtifacts 'testImage/*'
      } else {  //SEQUENTIAL RUNNING

       sh "mv ${workspace}/test/*.xml ${workspace}/testResult"
       junit 'testResult/*.xml'

       sh "mv ${workspace}/test/*.png ${workspace}/testImage"
       archiveArtifacts 'testImage/*'

      }
     } catch(e) {

     }
}

def taskList(filePath) {
        def tasks =[]
        if (fileExists("${filePath}")) {

            def f = readFile("${filePath}")
            def lines = f.readLines()

            lines.each { String line ->
              if(line.contains("containerArn")){
                 def s = line.split('/')
                 println s[s.size()-2]
                 tasks << s[s.size()-2]
              }
            }

         println tasks
        }

       return tasks
}

def waitingTasks(tasks) {

        def testStatus = false
        int execution = 0
        int timeout  = TIMEOUT.toInteger()

        println timeout

        while(testStatus == false) {

           def running = sh(script: 'aws ecs list-tasks --cluster converse-selenium', returnStdout: true)
           println running

           count = 0
           for (String task : tasks){
              if(running.contains(task)) {
                   count++
              }
           }

           println "Running Task Count"
           println count

           if(count == 0) {
              testStatus = true
           }

           sleep 5

           execution+=5

           println "Execution time"
           println execution

           if(execution > timeout) {

             println timeout

             running = sh(script: 'aws ecs list-tasks --cluster converse-selenium', returnStdout: true)
             for (task in tasks) {
               if(running.contains(task)) {
                 try {
                   sh "aws ecs stop-task --cluster converse-selenium --task ${task}"
                   sleep 1
                 } catch(e) {
                 }
               }
             }
           }

        }
}

def cleanup(WK) {
    try {
     if("${params.PARALLELRUNNING}" == "YES") {
       //Mount volume
       archiveArtifacts 'testImage/*'
       def workspace = env.WORKSPACE
       sh "sudo rm -r -f ${workspace}/wk/${WK}"
       sh "sudo rm -r -f ${workspace}/wk/__pycache__"
       dir("${workspace}") {
      //    sh "fuser -muv ${workspace}/wk"
       //   sh "sudo umount -i ${workspace}/wk"
       }
     } else {  //SEQUENTIAL RUNNING
       archiveArtifacts 'testImage/*'
       sh "sudo docker-compose -f docker-compose.yml down"
       sh "sudo docker volume prune -f"
       sh "sudo docker rmi -f `sudo docker images -q`"
     }
    } catch (e) {
    //    sh "sudo umount -i ${workspace}/wk"
    }
 }
